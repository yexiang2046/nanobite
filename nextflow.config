params {
    cpus = 16
    // Input/Output
    sample_info = null          // Path to sample info file
    output_dir = "results"      // Output directory
    reference = null            // Reference genome path

    // Alignment parameters
    mm2opts = ""
    
    // RNA modification parameters
    min_coverage = 5            // Minimum coverage for modification calling
    prob_threshold = 0.8        // Probability threshold for modification calls
    
    // Region analysis
    regions_bed = null          // Path to BED file for specific regions
    generate_motif_regions = false // Whether to generate regions BED from motifs
    motif = "DRACH"            // Default motif for region generation
    
    // Modification types
    base_mods = "m,a,u"        // Modification types to analyze (m5C, m6A, pseU)
}

process {
    withName: 'MOD_BASECALLING' {
        container = 'staphb/dorado:0.9.0-cuda12.2.0'
        memory = '32 GB'
        cpus = 8
    }

    withName: 'align' {
        container = 'staphb/dorado:0.9.0-cuda12.2.0'
        memory = '32 GB'
        cpus = 4
        containerOptions = '--gpus all'
    }
    
    withName: 'basecalling_rna' {
        container = 'staphb/dorado:0.9.0-cuda12.2.0'
        memory = '16 GB'
        cpus = 4
        containerOptions = '--gpus all'
    }

    withName: 'modkit_*' {
        container = 'xiang2019/modkit:v1.0.0'
        memory = '60 GB'
        cpus = 16
    }

    // default
    withName: '.*' {
        memory = '60 GB'
        cpus = 16
    }

}

docker {
    enabled = true
    // Only use GPU if specifically requested
    runOptions = { params.use_gpu ? '--gpus device=' + params.gpu_device.replace('cuda:', '') : '' }
    fixOwnership = true
    temp = 'auto'
    // Disable NVIDIA runtime by default
    nvidia.enabled = false
}

// Resource management
executor {
    $local {
        cpus = 8
        memory = '64 GB'
    }
}

// Report generation
report {
    enabled = true
    file = "${params.output_dir}/pipeline_report.html"
}

timeline {
    enabled = true
    file = "${params.output_dir}/timeline.html"
}

trace {
    enabled = true
    file = "${params.output_dir}/trace.txt"
}

// Error handling
process.errorStrategy = { task.exitStatus == 125 ? 'retry' : 'terminate' }
process.maxRetries = 3
process.maxErrors = '-1'

// Profiles
profiles {
    gpu {
        params.use_gpu = true
        docker.nvidia.enabled = true
    }
    cpu {
        params.use_gpu = false
        params.gpu_device = 'cpu'
    }
}


